{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Printnig patterns with python "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "* \r\n",
      "* * \r\n",
      "* * * \r\n",
      "* * * * \r\n",
      "* * * * * \r\n",
      "* * * * * * \r\n",
      "* * * * * * * \r\n"
     ]
    }
   ],
   "source": [
    "## print a simple pyramid pattern\n",
    "\n",
    "# Function to describe printing patterns\n",
    "def pypat(n):\n",
    "    \n",
    "    # outer loop to handle number of rows\n",
    "    for i in range(0,n):\n",
    "        \n",
    "        # inner loop to handle number of columns\n",
    "        for j in range(0, i+1):\n",
    "            \n",
    "            # printing stars\n",
    "            print(\"* \",end=\"\")\n",
    "            \n",
    "        # ending line after each row\n",
    "        print(\"\\r\")\n",
    "\n",
    "# printing pattern with static value\n",
    "n = 7\n",
    "pypat(n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### After 180 degree rotation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            * \r\n",
      "          * * \r\n",
      "        * * * \r\n",
      "      * * * * \r\n",
      "    * * * * * \r\n",
      "  * * * * * * \r\n",
      "* * * * * * * \r\n"
     ]
    }
   ],
   "source": [
    "# Function to describe printing patterns\n",
    "def pypat1(n):\n",
    "    \n",
    "    # number of spaces\n",
    "    k = 2*n -2\n",
    "    \n",
    "    # outer loop to handle number of rows\n",
    "    for i in range(0, n):\n",
    "        \n",
    "        # inner loop to handle number of spaces\n",
    "        # values changes accordingly to requirement \n",
    "        for j in range(0, k):\n",
    "            print(end=\" \")\n",
    "            \n",
    "        # decrementing k after each loop \n",
    "        k = k -2\n",
    "        \n",
    "        # inner loop to handle number of columns\n",
    "        # values changing accordingly to outer loop\n",
    "        for j in range(0, i+1):\n",
    "            \n",
    "            # printing stars \n",
    "            print(\"* \", end=\"\")\n",
    "        \n",
    "        # ending line after each row\n",
    "        print(\"\\r\")\n",
    "        \n",
    "# printing pattern with static value \n",
    "n = 7\n",
    "pypat1(n)\n",
    "        \n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Printing Pyramid\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            * \r\n",
      "           * * \r\n",
      "          * * * \r\n",
      "         * * * * \r\n",
      "        * * * * * \r\n",
      "       * * * * * * \r\n",
      "      * * * * * * * \r\n"
     ]
    }
   ],
   "source": [
    "# Function to describe printing patterns\n",
    "def pypat2(n):\n",
    "    \n",
    "    # number of spaces\n",
    "    k = 2*n - 2\n",
    "    \n",
    "    # outer loop to handle number of row\n",
    "    for i in range(0, n):\n",
    "        \n",
    "        # inner loop to handle number of spaces\n",
    "        # value changing accordingly to requirement\n",
    "        for j in range(0, k):\n",
    "            print(end=\" \")\n",
    "        \n",
    "        # decrementing k after each loop\n",
    "        k = k -1\n",
    "        \n",
    "        # inner loop to handle number of columns \n",
    "        # value changing accordingly outer loop \n",
    "        for j in range(0, i+1):\n",
    "            \n",
    "            # printing stars\n",
    "            print(\"* \", end=\"\")\n",
    "            \n",
    "        # ending line after each row\n",
    "        print(\"\\r\")\n",
    "        \n",
    "# printing pattern with static value 7\n",
    "n = 7\n",
    "pypat2(n)\n",
    "        "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
